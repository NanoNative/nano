name: "Base Pipeline"
# This workflow automates the process of updating, building, testing, version bumping, deploying to Maven Central, and tagging a release.
# - On any error (during build, tests, or deployment), no changes or artifacts will be published, ensuring atomic operations.
# - Easy to retry: the pipeline can be retriggered from any point by adjusting inputs, with versioning and changes handled automatically.
# - Deployments occur automatically on the main branch if there are changes or version increments, with the option to provide manual input for version control (major, minor, patch, rc).
# - Supports automatic updates of Maven/Gradle wrappers and properties, with the option to run tests or skip them.

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: false
        description: "[ref] e.g. branch, tag or commit to checkout [default: github_ref_name || github_head_ref ]"
      run_update:
        type: boolean
        required: false
        default: true
        description: "Tries to update the repository like maven/gradle wrapper and maven properties"
      run_test:
        type: boolean
        required: false
        default: true
        description: "Runs maven/gradle tests"
      run_deploy:
        type: string
        required: false
        default: "disabled"
        description: "version increment (Main branch with changes only) [major, minor, patch, rc, disabled]"
    secrets:
      BOT_TOKEN:
        description: "GitHub Token"
        required: false
      OSSH_USER:
        description: "Maven Central username"
        required: true
      OSSH_PASS:
        description: "Maven Central password"
        required: true
      GPG_SIGNING_KEY:
        description: "GPG private key for signing artifacts"
        required: true
      GPG_PASSPHRASE:
        description: "GPG passphrase for signing artifacts"
        required: true

jobs:
  build:
    name: "Build"
    timeout-minutes: 30
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      # update repository
      contents: write
      # create download GitHub packages
      packages: write
      # update deploy status
      deployments: write
    steps:
      - name: "üîç Checkout [${{ inputs.ref || github.ref || github.ref_name || github.head_ref }}]"
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          ref: ${{ inputs.ref || github.ref || github.ref_name || github.head_ref }}
          token: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
      - name: "üì¶ Restore cache [${{ runner.os }}-build-${{ hashFiles('**/pom.xml', '**/build.gradle*', '**/package-lock.json') }}]"
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2
            ~/.gradle/caches
            ~/.gradle/wrapper
            **/node_modules/*
          key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml', '**/build.gradle*', '**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml', '**/build.gradle*', '**/package-lock.json') }}
      - name: "üõ†Ô∏è Read Java Info"
        id: "java_info"
        uses: YunaBraska/java-info-action@main
      - name: "üöÄ Setup Java [${{ steps.java_info.outputs.java_version }}] Builder [${{ steps.java_info.outputs.builder_name }}] [${{ steps.java_info.outputs.builder_version }}]"
        uses: actions/setup-java@main
        with:
          java-version: ${{ steps.java_info.outputs.java_version }}
          distribution: 'adopt'
          server-id: central
          server-username: OSSH_USER
          server-password: OSSH_PASS
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }} # Value of the GPG private key to import
          gpg-passphrase: GPG_PASSPHRASE
      - name: "üîÑ Update [${{ inputs.run_update }}]"
        id: "update"
        if: ${{ inputs.run_update }}
        run: |
          ${{ steps.java_info.outputs.cmd_update_wrapper }}
          if [ "${{ steps.java_info.outputs.builder_name }}" != "Gradle" ]; then
            ${{ steps.java_info.outputs.cmd_update_props }}
            ${{ steps.java_info.outputs.cmd_update_parent }}
          fi
          git config --global user.name 'Kira Bot'
          git config --global user.email 'kira@noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
      - name: "üß™Ô∏è Build & Test [${{ inputs.run_test }}]"
        if: ${{ inputs.run_test }}
        run: ${{ steps.java_info.outputs.cmd_test_build }}
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
      - name: "üèóÔ∏è Build Only [${{ !inputs.run_test }}]"
        if: ${{ !inputs.run_test }}
        run: ${{ steps.java_info.outputs.cmd_build }}
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
      ########## DEPLOYMENT ##########
      - name: "üìú Read Git Info"
        id: "git_info"
        uses: YunaBraska/git-info-action@main
      - name: "üî¢ Read Semver Info [${{ inputs.run_deploy != 'disabled' && inputs.run_deploy || 'patch' }}]"
        id: "semver_info"
        uses: YunaBraska/semver-info-action@main
        with:
          semver-a: '${{ steps.java_info.outputs.project_version }}'
          increase-a: ${{ inputs.run_deploy != 'disabled' && inputs.run_deploy || 'patch' }}
      - name: "üóíÔ∏è Log Information"
        id: "metrics"
        run: |
          echo ""
          echo "########## WORKFOW ##########"
          echo "[semver_info] clean_semver [${{ steps.semver_info.outputs.clean_semver }}]"
          echo "[semver_info] increase [${{ inputs.run_deploy != 'disabled' && inputs.run_deploy || 'patch' }}]"
          echo "[git_info] has_changes [${{ steps.git_info.outputs.has_changes }}]"
          echo "[git_info] has_local_changes [${{ steps.git_info.outputs.has_local_changes }}]"
          echo "[git_info] is_default_branch [${{ steps.git_info.outputs.is_default_branch }}]"
          echo "[java_info] project_version [${{ steps.java_info.outputs.project_version }}]"
          echo "[java_info] java_version [${{ steps.java_info.outputs.java_version }}]"
          echo "[java_info] builder_name [${{ steps.java_info.outputs.builder_name }}]"
          echo "[java_info] builder_version [${{ steps.java_info.outputs.builder_version }}]"
          echo "[inputs] ref [${{ inputs.ref || github.ref || github.ref_name || github.head_ref }}]"
          echo "[inputs] run_update [${{ inputs.run_update }}]"
          echo "[inputs] run_test [${{ inputs.run_test }}]"
          echo "[inputs] run_deploy [${{ inputs.run_deploy }}]"
          if [[ "${{ steps.git_info.outputs.is_default_branch }}" == 'true' && ( "${{ steps.git_info.outputs.has_changes }}" == 'true' || "${{ steps.git_info.outputs.has_local_changes }}" == 'true') && "${{ inputs.run_deploy }}" != 'disabled' ]]; then
              echo "should_deploy [true]"
              echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
              echo "should_deploy [false]"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
          echo ""
          echo "########## CODE QUALITY ##########"
          jacoco_report=$(find . -type f -name "testCodeCoverageReport.xml" -o -name "jacocoTestReport.xml" -o -name "jacoco.xml" | awk -F/ '{print NF, $0}' | sort -n | cut -d' ' -f2- | head -n 1)
          echo "jacoco_report [${jacoco_report}]"
          echo "jacoco_report=${jacoco_report}" >> $GITHUB_OUTPUT
          
          has_publish_to_code_climate=$(if [[ -n "${{ secrets.CC_TEST_REPORTER_ID }}" && -n "${jacoco_report}" ]]; then echo "true"; else echo "false"; fi)
          echo "has_publish_to_code_climate [$has_publish_to_code_climate]"
          echo "has_publish_to_code_climate=$has_publish_to_code_climate" >> $GITHUB_OUTPUT
      - name: "‚úÖ Commit Changes [${{ steps.metrics.outputs.should_deploy == 'true' }}]"
        if: ${{ steps.metrics.outputs.should_deploy == 'true' }}
        id: "commit"
        run: |
          ./mvnw versions:set -DnewVersion="${{ steps.semver_info.outputs.clean_semver }}" -DgenerateBackupPoms=false -B -q
          git add .
          git commit -m "chore(‚öïÔ∏è): release [${{ steps.semver_info.outputs.clean_semver }}]"
          echo "latest_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: "üè∑Ô∏è Deploy start [${{ steps.semver_info.outputs.clean_semver }}]"
        if: ${{ steps.metrics.outputs.should_deploy == 'true' }}
        uses: bobheadxi/deployments@v1.5.0
        id: deployment-status
        with:
          step: start
          token: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
          env: "maven_central"
          desc: "Started deploy [${{ steps.semver_info.outputs.clean_semver }}] to [maven_central]"
      - name: "üçæ Deploy [${{ steps.semver_info.outputs.clean_semver }}]"
        if: ${{ steps.metrics.outputs.should_deploy == 'true' }}
        run: ./mvnw deploy -P release -Dmaven.test.skip=true -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}" -B
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
          OSSH_USER: ${{ secrets.OSSH_USER }}
          OSSH_PASS: ${{ secrets.OSSH_PASS }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: "üè∑Ô∏è Deploy finish [${{ steps.semver_info.outputs.clean_semver }}]"
        if: ${{ steps.metrics.outputs.should_deploy == 'true' }}
        uses: bobheadxi/deployments@v1.5.0
        with:
          step: finish
          token: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
          env: "maven_central"
          env_url: "https://central.sonatype.com/publishing"
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment-status.outputs.deployment_id }}
          desc: "Finished deploy [${{ steps.semver_info.outputs.clean_semver }}] to [maven_central]"
      - name: "‚úÖ Publish Changes [${{ steps.metrics.outputs.should_deploy == 'true' }}]"
        if: ${{ steps.metrics.outputs.should_deploy == 'true' }}
        run: |
          git push origin HEAD:${{ inputs.ref || github.ref || github.ref_name || github.head_ref }}
      - name: "üîñ Tag & Release [${{ steps.semver_info.outputs.clean_semver }}]"
        if: ${{ steps.metrics.outputs.should_deploy == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          body: "${{ steps.git_info.outputs.change_log }}"
          commit: ${{ steps.commit.outputs.latest_sha }}
          token: ${{ secrets.BOT_TOKEN || secrets.GITHUB_TOKEN }}
          tag: ${{ steps.semver_info.outputs.clean_semver }}
          name: ${{ steps.semver_info.outputs.clean_semver }}
      - name: "üìù Publish code quality [${{ steps.metrics.outputs.should_deploy == 'true' && steps.metrics.outputs.has_publish_to_code_climate == 'true' }}]"
        uses: paambaati/codeclimate-action@v9.0.0
        if: ${{ steps.metrics.outputs.should_deploy == 'true' && steps.metrics.outputs.has_publish_to_code_climate == 'true' }}
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
          JACOCO_SOURCE_PATH: "${{github.workspace}}/src/main/java"
        with:
          coverageLocations: ${{steps.metrics.outputs.jacoco_report}}:jacoco
